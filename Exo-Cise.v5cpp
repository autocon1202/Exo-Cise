{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor Motor1 = motor(PORT1, ratio18_1, false);\n\nmotor Motor2 = motor(PORT19, ratio18_1, true);\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {Cole Sosnowski}                                                  */\n/*    Created:      {3/5/23}                                                    */\n/*    Description:  Exo-Cise control program                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint main() {\n  // Set menu initial state\n  int state = 1;\n  \n  // Initialize motor settings and stop motors\n  Motor1.setStopping(hold);\n  Motor1.setMaxTorque(50, percent);\n  Motor1.setVelocity(50,percent);\n  Motor2.setStopping(hold);\n  Motor2.setMaxTorque(50, percent);\n  Motor2.setVelocity(50,percent);\n  Motor1.stop();\n  Motor2.stop();\n\n  // Initalize main menu screen\n  Brain.Screen.setFillColor(green);\n  Brain.Screen.drawRectangle(320, 50, 150, 150);\n  Brain.Screen.setFillColor(green);\n  Brain.Screen.setFont(mono20);\n  Brain.Screen.setCursor(7, 36);\n  Brain.Screen.print(\"Workouts\");\n  Brain.Screen.setFillColor(transparent);\n  Brain.Screen.setCursor(5, 4);\n  Brain.Screen.print(\"Heartrate: 80 BPM\");\n  Brain.Screen.setCursor(7, 4);\n  Brain.Screen.print(\"Calories: 400\");\n\n  // Begin operation loop\n  while (true) {\n    if (state == 1) {\n      if (Brain.Screen.pressing()) {\n        // Checks if workouts button has been pressed\n        if(470 >= Brain.Screen.xPosition() && Brain.Screen.xPosition() >= 320 && 200 >= Brain.Screen.yPosition() && Brain.Screen.yPosition() >= 50) {\n          // Changes menu state and initializes workout menu\n          state = 2;\n          Brain.Screen.clearScreen();\n          wait(0.05,seconds);\n          Brain.Screen.setFillColor(red);\n          Brain.Screen.drawRectangle(10,75,100,100);\n          Brain.Screen.setFillColor(blue);\n          Brain.Screen.drawRectangle(120,75,100,100);\n          Brain.Screen.setFillColor(purple);\n          Brain.Screen.drawRectangle(230,75,100,100);\n          Brain.Screen.setFillColor(green);\n          Brain.Screen.drawRectangle(340,75,100,100);\n          Brain.Screen.setFillColor(red);\n          Brain.Screen.setFont(mono20);\n          Brain.Screen.setCursor(7, 4);\n          Brain.Screen.print(\"Bicep\");\n          Brain.Screen.setFillColor(blue);\n          Brain.Screen.setCursor(7, 15);\n          Brain.Screen.print(\"Mixed\");\n          Brain.Screen.setFillColor(purple);\n          Brain.Screen.setCursor(7, 26);\n          Brain.Screen.print(\"Tricep\");\n          Brain.Screen.setFillColor(green);\n          Brain.Screen.setCursor(7, 37);\n          Brain.Screen.print(\"Back\");\n        }\n      }\n    }\n    if (state == 2) {\n      if (Brain.Screen.pressing()) {\n        // Sets arm tension for bicep workout\n        if (110 >= Brain.Screen.xPosition() && Brain.Screen.xPosition() >= 10 && 175 >= Brain.Screen.yPosition() && Brain.Screen.yPosition() >= 75) {\n          Motor1.spinToPosition(800,degrees);\n          Motor2.spinToPosition(800,degrees);\n        }\n        // Sets arm tension for a mixed workout\n        else if(220 >= Brain.Screen.xPosition() && Brain.Screen.xPosition() >= 120 && 175 >= Brain.Screen.yPosition() && Brain.Screen.yPosition() >= 75) {\n          Motor1.spinToPosition(400,degrees);\n          Motor2.spinToPosition(400,degrees);\n        }\n        // Sets arm tension for a tricep workout\n        else if(330 >= Brain.Screen.xPosition() && Brain.Screen.xPosition() >= 230 && 175 >= Brain.Screen.yPosition() && Brain.Screen.yPosition() >= 75) {\n          Motor1.spinToPosition(0,degrees);\n          Motor2.spinToPosition(0,degrees);\n        }\n        // Sets menu state and returns screen to the home menu\n        else if(440 >= Brain.Screen.xPosition() && Brain.Screen.xPosition() >= 340 && 175 >= Brain.Screen.yPosition() && Brain.Screen.yPosition() >= 75) {\n          Motor1.stop();\n          Motor2.stop();\n          state = 1;\n          Brain.Screen.clearScreen();\n          wait(0.05,seconds);\n          Brain.Screen.setFillColor(green);\n          Brain.Screen.drawRectangle(320, 50, 150, 150);\n          Brain.Screen.setFillColor(green);\n          Brain.Screen.setFont(mono20);\n          Brain.Screen.setCursor(7, 36);\n          Brain.Screen.print(\"Workouts\");\n          Brain.Screen.setFillColor(transparent);\n          Brain.Screen.setCursor(5, 4);\n          Brain.Screen.print(\"Heartrate: 80 BPM\");\n          Brain.Screen.setCursor(7, 4);\n          Brain.Screen.print(\"Calories: 400\");\n        }\n      }\n    }\n  }\n}\n","textLanguage":"cpp","rconfig":[{"port":[1],"name":"Motor1","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[19],"name":"Motor2","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"}}],"slot":1,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}